/*
 * Gradle build specifications for
 * LangPi: language processing interface
 * 
 * Copyright 2017 Abdelkrime Aries <kariminfo0@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'jacoco'
//For jitPack to build
apply plugin: 'maven'

// Gradle java plugin
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Release version
version = '1.1.4'

ext.current_Date = getDate()

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}


sourceSets {
	basic
    basic_main {
    	compileClasspath += basic.output
    }
    basic_agpl3 {
    	compileClasspath += basic.output
    }
    eval {
    	compileClasspath += basic.output
    }
    wordnet
}

task jarBasicMain(type: Jar) {
    baseName = "langpi-basic-main"
    from sourceSets.basic_main.output 
    from sourceSets.basic.output 
    
    manifest {
        attributes 'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
                   "Specification-Title"    : "Language processing interface: basic main",
                   "Specification-Version"  : version,
                   "Specification-Vendor"   : "Kariminf",
                   "Implementation-Title"   : "kariminf.langpi.basic-main",
                   "Implementation-Version" : version + "-build" + current_Date ,
                   "Implementation-Vendor"  : "Kariminf",
                   "Built-With": "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                   "Build-Time": current_Date,
                   "Built-By": project.hasProperty('BF_USER') ? project.getProperty('BF_USER') : System.getProperty('user.name'),
                   "Built-On": "${InetAddress.localHost.hostName}/${InetAddress.localHost.hostAddress}"
    }
}

task jarBasicAgpl3(type: Jar) {
    baseName = "langpi-basic-agpl3"
    from sourceSets.basic_agpl3.output 
    from sourceSets.basic.output 
    
    manifest {
        attributes 'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
                   "Specification-Title"    : "Language processing interface: basic agpl3",
                   "Specification-Version"  : version,
                   "Specification-Vendor"   : "Kariminf",
                   "Implementation-Title"   : "kariminf.langpi.basic-agpl3",
                   "Implementation-Version" : version + "-build" + current_Date ,
                   "Implementation-Vendor"  : "Kariminf",
                   "Built-With": "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                   "Build-Time": current_Date,
                   "Built-By": project.hasProperty('BF_USER') ? project.getProperty('BF_USER') : System.getProperty('user.name'),
                   "Built-On": "${InetAddress.localHost.hostName}/${InetAddress.localHost.hostAddress}"
    }
}

task jarEval(type: Jar) {
    baseName = "langpi-eval"
    from sourceSets.eval.output 
    
    manifest {
        attributes 'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
                   "Specification-Title"    : "Language processing interface: evaluation",
                   "Specification-Version"  : version,
                   "Specification-Vendor"   : "Kariminf",
                   "Implementation-Title"   : "kariminf.langpi.eval",
                   "Implementation-Version" : version + "-build" + current_Date ,
                   "Implementation-Vendor"  : "Kariminf",
                   "Built-With": "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                   "Build-Time": current_Date,
                   "Built-By": project.hasProperty('BF_USER') ? project.getProperty('BF_USER') : System.getProperty('user.name'),
                   "Built-On": "${InetAddress.localHost.hostName}/${InetAddress.localHost.hostAddress}"
    }
}

task jarWordnet(type: Jar) {
    baseName = "langpi-wordnet"
    from sourceSets.wordnet.output 
    
    manifest {
        attributes 'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
                   "Specification-Title"    : "Language processing interface: wordnet",
                   "Specification-Version"  : version,
                   "Specification-Vendor"   : "Kariminf",
                   "Implementation-Title"   : "kariminf.langpi.wordnet",
                   "Implementation-Version" : version + "-build" + current_Date ,
                   "Implementation-Vendor"  : "Kariminf",
                   "Built-With": "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                   "Build-Time": current_Date,
                   "Built-By": project.hasProperty('BF_USER') ? project.getProperty('BF_USER') : System.getProperty('user.name'),
                   "Built-On": "${InetAddress.localHost.hostName}/${InetAddress.localHost.hostAddress}"
    }
}

artifacts {
        archives jarBasicMain
        archives jarBasicAgpl3
        archives jarEval
        archives jarWordnet
}


repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    
    basic_mainCompile 'org.apache.lucene:lucene-core:4.10.2'
    basic_mainCompile 'org.apache.lucene:lucene-analyzers-common:4.10.2'
    basic_agpl3Compile 'org.apache.lucene:lucene-analyzers-common:4.10.2'
    basic_mainCompile 'org.apache.lucene:lucene-analyzers-kuromoji:4.10.2'
    basic_mainCompile 'org.apache.lucene:lucene-analyzers-smartcn:4.10.2'
    basic_mainCompile 'org.apache.opennlp:opennlp-maxent:3.0.2-incubating'
    basic_mainCompile 'org.apache.opennlp:opennlp-tools:1.7.2'
    wordnetCompile 'org.xerial:sqlite-jdbc:3.8.11.2'
    wordnetCompile 'edu.mit:jwi:2.2.3'
    
    //com.github.kariminf (https://jitpack.io)
    basic_agpl3Compile 'com.github.kariminf:k-hebmorph:2.0.3'
    basic_mainCompile 'com.github.kariminf:k-jhazm:1.0.2'
    basic_agpl3Compile 'com.github.kariminf:k-opennlp1.4:1.4.4'
    
    //Remote release
    basicCompile 'com.github.kariminf:k-toolja:1.1.0'
    basic_mainCompile 'com.github.kariminf:k-toolja:1.1.0'
    basic_agpl3Compile 'com.github.kariminf:k-toolja:1.1.0'
    evalCompile 'com.github.kariminf:k-toolja:1.1.0'
    //Local release
    //sharedCompile project(':k-toolja')
    //basic_mainCompile project(':k-toolja')
    //basic_agpl3Compile project(':k-toolja')
    
    //compile project(':k-toolja')

    testCompile 'junit:junit:4.12'
    
    
    runtime configurations.basicRuntime
    runtime configurations.basic_mainRuntime
    runtime configurations.basic_agpl3Runtime
    runtime configurations.evalRuntime
    runtime configurations.wordnetRuntime
}

javadoc {    
    source = sourceSets.basic.allJava
    source += sourceSets.basic_main.allJava
    source += sourceSets.basic_agpl3.allJava
    source += sourceSets.eval.allJava
    source += sourceSets.wordnet.allJava
    
    options.memberLevel = JavadocMemberLevel.PRIVATE
    //classpath = configurations.compile
    destinationDir = file("docs")
    failOnError false
}

// this step is necessary when installing both jars in the local maven repository
install {
    repositories.mavenInstaller {
		addFilter('basic-main') { artifact, file -> artifact.name.endsWith('basic-main') }
		addFilter('basic-agpl3') { artifact, file -> artifact.name.endsWith('basic-agpl3') }
		addFilter('eval') { artifact, file -> artifact.name.endsWith('eval') }
		addFilter('wordnet') { artifact, file -> artifact.name.endsWith('wordnet') }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestReport
